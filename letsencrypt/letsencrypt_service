#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

seconds_to_wait=3600

update_certs() {
  [[ ! -f "$DIR"/letsencrypt_service_data ]] && return

  # Load relevant container settings
  source "$DIR"/letsencrypt_service_data

  reload_nginx='false'
  for cid in "${LETSENCRYPT_CONTAINERS[@]}"; do
    # Derive host and email variable names
    host_varname="LETSENCRYPT_${cid}_HOST"
    # Array variable indirection hack: http://stackoverflow.com/a/25880676/350221
    hosts_array=$host_varname[@]
    email_varname="LETSENCRYPT_${cid}_EMAIL"

    params_d_str=""
    hosts_array_expanded=("${!hosts_array}")
    # First domain will be our base domain
    base_domain="${hosts_array_expanded[0]}"

    # Create directorty for the first domain
    mkdir -p /etc/nginx/certs/$base_domain
    mkdir -p /etc/nginx/vhost.d/
    cd /etc/nginx/certs/

    if [ "$STAGING" = "yes" ];then
      echo "Let's Encrypt Staging : Enabled"
      echo "CA=\"https://acme-staging.api.letsencrypt.org/directory\""		  >  ./$base_domain/config
      echo CONTACT_EMAIL="${!email_varname}"									              >> ./$base_domain/config
    else
      echo "Let's Encrypt Staging : Disabled"
      echo CONTACT_EMAIL="${!email_varname}"									              >> ./$base_domain/config
    fi

    for domain in "${!hosts_array}"; do
      # Add all the domains to certificate
      params_d_str+=" --domain $domain"
    done

    # Nginx Status is effective when inserted
    if [ -n "$NGX_STS_IP" ] && [ -n "$NGX_STS_NW" ];then
      echo "# Nginx Status is effective when inserted"
      echo "server {"                           >  /etc/nginx/vhost.d/healthcheck.conf
      echo "  listen 80;"                       >> /etc/nginx/vhost.d/healthcheck.conf
      echo "  server_name $NGX_STS_IP;"         >> /etc/nginx/vhost.d/healthcheck.conf
      echo ""                                   >> /etc/nginx/vhost.d/healthcheck.conf
      echo "  location = /healthcheck.html {"   >> /etc/nginx/vhost.d/healthcheck.conf
      echo "    empty_gif;"                     >> /etc/nginx/vhost.d/healthcheck.conf
      echo "    access_log off;"                >> /etc/nginx/vhost.d/healthcheck.conf
      echo "    allow $NGX_STS_NW;"             >> /etc/nginx/vhost.d/healthcheck.conf
      echo "    deny all;"                      >> /etc/nginx/vhost.d/healthcheck.conf
      echo "  }"                                >> /etc/nginx/vhost.d/healthcheck.conf
      echo "}"                                  >> /etc/nginx/vhost.d/healthcheck.conf
    fi

    echo "# Creating/Renewal $base_domain certificates... (${hosts_array_expanded[*]})"
    /usr/local/bin/letsencrypt.sh \
      --cron \
      $params_d_str \
      --challenge dns-01 \
      --out ./ \
      --algo secp384r1 \
      --config ./$base_domain/config \
      --hook /usr/local/bin/hook.py
      letsencrypt_sh_return=$?

      current=`openssl sha256 -r ./$base_domain/privkey.pem | awk '{print $1}'`
      last=`cat ./$base_domain/timestamp`

      if [ ! "$STAGING" = "yes" ];then
        if [ "$last" != "$current" ];then
          echo "## Creating/Renewal $base_domain HTTP Public Key Pinning... (${hosts_array_expanded[*]})"
            
            # Out of the main key, Base64 encoding
            HPKP_Key1=`/usr/bin/openssl x509 -noout -in ./$base_domain/cert.pem -pubkey |\
              /usr/bin/openssl pkey -pubin -outform der |\
              /usr/bin/openssl dgst -sha256 -binary |\
              /bin/base64`

            # Take out the Certificate issuer key, Base64 encoding
            HPKP_Key2=`/usr/bin/openssl x509 -noout -in ./$base_domain/chain.pem -pubkey |\
              /usr/bin/openssl pkey -pubin -outform der |\
              /usr/bin/openssl dgst -sha256 -binary |\
              /bin/base64`

            # Backup key generation
            /usr/bin/openssl req -new -nodes \
              -newkey ec:<(openssl ecparam -name secp384r1) \
              -subj "/C=$C/ST=$ST/L=$L/O=$O/OU=$OU/CN=$base_domain" \
              -keyout ./$base_domain/hpkp-backup.key \
              -out ./$base_domain/hpkp-backup.csr

            # Take out the backup key, Base64 encoding
            HPKP_Key3=`/usr/bin/openssl req -pubkey < ./$base_domain/hpkp-backup.csr |\
            /usr/bin/openssl pkey -pubin -outform der | \
            /usr/bin/openssl dgst -sha256 -binary | \
            /bin/base64`

            # HPKP Settings
            echo add_header Public-Key-Pins "'pin-sha256=\"$HPKP_Key1\"; pin-sha256=\"$HPKP_Key2\"; pin-sha256=\"$HPKP_Key3\"; max-age=600; includeSubDomains'"";" > /etc/nginx/vhost.d/$base_domain-HPKP.conf

          echo "## Creating/Renewal $base_domain Certificate Transparency... (${hosts_array_expanded[*]})"

            mkdir -p ./$base_domain/scts

            echo "### Sending $base_domain ct.googleapis.com/aviator... (${hosts_array_expanded[*]})"
            /usr/local/bin/ct-submit ct.googleapis.com/aviator \
              <./$base_domain/fullchain.pem \
              > ./$base_domain/scts/aviator.sct

            echo "### Sending $base_domain ct.googleapis.com/pilot... (${hosts_array_expanded[*]})"
            /usr/local/bin/ct-submit ct.googleapis.com/pilot \
              <./$base_domain/fullchain.pem \
              > ./$base_domain/scts/pilot.sct

            echo "### Sending $base_domain ct.googleapis.com/rocketeer... (${hosts_array_expanded[*]})"
            /usr/local/bin/ct-submit ct.googleapis.com/rocketeer \
              <./$base_domain/fullchain.pem \
              > ./$base_domain/scts/rocketeer.sct

          echo "## Creating/Renewal $base_domain Diffie-Hellman... (${hosts_array_expanded[*]})"
          /usr/bin/openssl dhparam 2048 -out ./$base_domain/dhparam.pem
        fi  
      fi

    if [[ $letsencrypt_sh_return -eq 0 ]]; then
      for domain in "${!hosts_array}"; do
        echo "Creating/Renewal $base_domain Symbolic link... (${hosts_array_expanded[*]})"
        # Symlink all alternative names to base domain certificate
        ln -sf ./$base_domain/fullchain.pem /etc/nginx/certs/$domain".crt"
        ln -sf ./$base_domain/chain.pem		/etc/nginx/certs/$domain".ocsp.crt"
        ln -sf ./$base_domain/privkey.pem       /etc/nginx/certs/$domain".key"
        ln -sf ./$base_domain/dhparam.pem	/etc/nginx/certs/$domain".dhparam.pem"
        echo `openssl sha256 -r ./$base_domain/privkey.pem | awk '{print $1}'` > ./$base_domain/timestamp
      done
      reload_nginx='true'
    fi
  done
  unset LETSENCRYPT_CONTAINERS
  if [[ "$reload_nginx" == 'true' ]]; then
    /usr/local/bin/docker-gen -only-exposed /app/nginx.tmpl /etc/nginx/conf.d/default.conf
    nginx -s reload
  fi
}

pid=
trap '[[ $pid ]] && kill $pid; exec $0' EXIT
trap 'trap - EXIT' INT TERM

echo 'Waiting 10s before updating certs...'
sleep 10s

update_certs

# Wait some amount of time
echo "Sleep for ${seconds_to_wait}s"
sleep $seconds_to_wait & pid=$!
wait
pid=
